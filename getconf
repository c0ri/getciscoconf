# -- GetConf.py
# -- Description: This script will take a list of hostnames, login Cisco devices with the list and download the running config and save it to a file
# --              in the format HOSTNAME-config.
# --
import paramiko
import time
import re
import base64

# Setup logging
paramiko.util.log_to_file('ssh.log')

def wait_for_prompt(shell, prompt, timeout=10):
    start_time = time.time()
    buffer = ''
    while time.time() - start_time < timeout:
        if shell.recv_ready():
            buffer += shell.recv(65535).decode('utf-8')
            if re.search(prompt, buffer):
                return True
        time.sleep(1)
    return False

def decode_password(encoded_password_file):
    with open(encoded_password_file, "r") as file:
        encoded_password = file.read().strip()
    return str(base64.b64decode(encoded_password).decode('ascii')).strip()

def connect_to_device(hostname, username, password, enable_password):
    # Create an SSH client
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # Connect to the device
        print(f"Connecting to {hostname}")
        ssh.connect(hostname, username=username, password=password, look_for_keys=False, allow_agent=False)

        # Create an SSH shell
        print(f"Envoking Shell")
        shell = ssh.invoke_shell()

        # Wait for the initial user prompt
        print(f"Waiting for prompt >")
        wait_for_prompt(shell, r'>')

        # Send commands to the device
        print(f"Sending enable command")
        shell.send("enable\n")
        time.sleep(2)
        print(f"Sending enable password")
        shell.send(f"{enable_password}\n")
        time.sleep(2)
        print(f"Waiting for enabled prompt")
        if not wait_for_prompt(shell, r'#'):
            raise Exception("Failed to enter enable mode")
        print(f"Setting terminal length 0")
        shell.send("terminal length 0\n")
        wait_for_prompt(shell, r'#')

        # Save the running config to a file
        print(f"Downloading config...")
        shell.send("show running-config\n")
        if not wait_for_prompt(shell, r'#'):
            raise Exception("Failed to get running config")

        running_config = shell.recv(999999).decode('utf-8')
        time.sleep(30)
        print(f"Config downloaded, Writing to file configs/{hostname}-config")
        with open(f"{hostname}-config", "w") as file:
            file.write(running_config)

    except Exception as e:
        print(f"Error connecting to {hostname}: {e}")
    finally:
        # Close the SSH connection
        ssh.close()

def process_host_file(file_path, encoded_password_file):
    password = decode_password(encoded_password_file)

    with open(file_path, "r") as file:
        hostnames = file.read().splitlines()

    for hostname in hostnames:
        # Replace these with your actual credentials
        username = "your_username"
        enable_password = password   # default to use the same password   

        connect_to_device(hostname, username, password, enable_password)

if __name__ == "__main__":
    host_file_path = "hostnames.txt"  # Replace with your actual file path
    encoded_password_file = "encoded_password.txt"  # Replace with your actual file path
    process_host_file(host_file_path, encoded_password_file)
